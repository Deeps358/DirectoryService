// <auto-generated />
using System;
using DirectoryServices.Infrastructure.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DirectoryServices.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(DirectoryServiceDbContext))]
    [Migration("20251006195521_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DirectoryServices.Entities.Departament", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<short>("Depth")
                        .HasColumnType("smallint")
                        .HasColumnName("depth");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isActive");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id")
                        .HasName("pk_departaments");

                    b.HasIndex("ParentId");

                    b.ToTable("departaments", (string)null);
                });

            modelBuilder.Entity("DirectoryServices.Entities.DepartmentLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartamentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_departament_location");

                    b.HasIndex("DepartamentId");

                    b.HasIndex("LocationId");

                    b.ToTable("departament_locations", (string)null);
                });

            modelBuilder.Entity("DirectoryServices.Entities.DepartmentPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartamentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DepartamentId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_departament_position");

                    b.HasIndex("DepartamentId");

                    b.HasIndex("DepartamentId1");

                    b.HasIndex("PositionId");

                    b.ToTable("departament_positions", (string)null);
                });

            modelBuilder.Entity("DirectoryServices.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isActive");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("DirectoryServices.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isActive");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id")
                        .HasName("pk_positions");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("DirectoryServices.Entities.Departament", b =>
                {
                    b.HasOne("DirectoryServices.Entities.Departament", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("DirectoryServices.Entities.ValueObjects.Departaments.DepIdentifier", "Identifier", b1 =>
                        {
                            b1.Property<Guid>("DepartamentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("identifier");

                            b1.HasKey("DepartamentId");

                            b1.ToTable("departaments");

                            b1.WithOwner()
                                .HasForeignKey("DepartamentId");
                        });

                    b.OwnsOne("DirectoryServices.Entities.ValueObjects.Departaments.DepName", "Name", b1 =>
                        {
                            b1.Property<Guid>("DepartamentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("name");

                            b1.HasKey("DepartamentId");

                            b1.ToTable("departaments");

                            b1.WithOwner()
                                .HasForeignKey("DepartamentId");
                        });

                    b.OwnsOne("DirectoryServices.Entities.ValueObjects.Departaments.DepPath", "Path", b1 =>
                        {
                            b1.Property<Guid>("DepartamentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("path");

                            b1.HasKey("DepartamentId");

                            b1.ToTable("departaments");

                            b1.WithOwner()
                                .HasForeignKey("DepartamentId");
                        });

                    b.Navigation("Identifier")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Path")
                        .IsRequired();
                });

            modelBuilder.Entity("DirectoryServices.Entities.DepartmentLocation", b =>
                {
                    b.HasOne("DirectoryServices.Entities.Departament", null)
                        .WithMany("Locations")
                        .HasForeignKey("DepartamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryServices.Entities.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectoryServices.Entities.DepartmentPosition", b =>
                {
                    b.HasOne("DirectoryServices.Entities.Departament", null)
                        .WithMany()
                        .HasForeignKey("DepartamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryServices.Entities.Departament", null)
                        .WithMany("Positions")
                        .HasForeignKey("DepartamentId1");

                    b.HasOne("DirectoryServices.Entities.Position", null)
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectoryServices.Entities.Location", b =>
                {
                    b.OwnsOne("DirectoryServices.Entities.ValueObjects.Locations.LocAdress", "Adress", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("city");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("street");

                            b1.HasKey("LocationId");

                            b1.ToTable("locations");

                            b1.ToJson("adress");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.OwnsOne("DirectoryServices.Entities.ValueObjects.Locations.LocName", "Name", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");

                            b1.HasKey("LocationId");

                            b1.ToTable("locations");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.OwnsOne("DirectoryServices.Entities.ValueObjects.Locations.LocTimezone", "Timezone", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("timezone");

                            b1.HasKey("LocationId");

                            b1.ToTable("locations");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.Navigation("Adress")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Timezone")
                        .IsRequired();
                });

            modelBuilder.Entity("DirectoryServices.Entities.Position", b =>
                {
                    b.OwnsOne("DirectoryServices.Entities.ValueObjects.Positions.PosDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("PositionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("description");

                            b1.HasKey("PositionId");

                            b1.ToTable("positions");

                            b1.WithOwner()
                                .HasForeignKey("PositionId");
                        });

                    b.OwnsOne("DirectoryServices.Entities.ValueObjects.Positions.PosName", "Name", b1 =>
                        {
                            b1.Property<Guid>("PositionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");

                            b1.HasKey("PositionId");

                            b1.ToTable("positions");

                            b1.WithOwner()
                                .HasForeignKey("PositionId");
                        });

                    b.Navigation("Description");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("DirectoryServices.Entities.Departament", b =>
                {
                    b.Navigation("Childrens");

                    b.Navigation("Locations");

                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
